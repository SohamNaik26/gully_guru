---
description: FastAPI dependency injection best practices
globs: ["**/*.py"]
---

# Dependency Injection Best Practices

## Database Session Management

- **Use Dependency Injection for Database Sessions**: Create a dependency function that yields a database session
  ```python
  # ✅ Good: Session dependency
  from fastapi import Depends
  from sqlmodel import Session, create_engine
  
  engine = create_engine("postgresql://user:password@localhost/gullyguru")
  
  def get_session():
      with Session(engine) as session:
          yield session
  
  @app.get("/players/{player_id}")
  def get_player(player_id: int, session: Session = Depends(get_session)):
      return session.get(Player, player_id)
  ```

- **Use Async Session Management**: For asynchronous database operations
  ```python
  # ✅ Good: Async session dependency
  from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
  
  async_engine = create_async_engine("postgresql+asyncpg://user:password@localhost/gullyguru")
  
  async def get_async_session():
      async with AsyncSession(async_engine) as session:
          yield session
  
  @app.get("/players/{player_id}")
  async def get_player(player_id: int, session: AsyncSession = Depends(get_async_session)):
      result = await session.execute(select(Player).where(Player.id == player_id))
      return result.scalar_one_or_none()
  ```

## Authentication and Authorization

- **Create Reusable Authentication Dependencies**: Implement authentication as a dependency
  ```python
  # ✅ Good: Authentication dependency
  from fastapi import Depends, HTTPException, status
  from fastapi.security import OAuth2PasswordBearer
  
  oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
  
  async def get_current_user(token: str = Depends(oauth2_scheme)):
      user = await authenticate_user(token)
      if not user:
          raise HTTPException(
              status_code=status.HTTP_401_UNAUTHORIZED,
              detail="Invalid authentication credentials",
              headers={"WWW-Authenticate": "Bearer"},
          )
      return user
  
  @app.get("/users/me")
  async def read_users_me(current_user: User = Depends(get_current_user)):
      return current_user
  ```

- **Role-Based Access Control**: Create dependencies for different access levels
  ```python
  # ✅ Good: Role-based dependency
  async def get_admin_user(current_user: User = Depends(get_current_user)):
      if current_user.role != "admin":
          raise HTTPException(
              status_code=status.HTTP_403_FORBIDDEN,
              detail="Not enough permissions"
          )
      return current_user
  
  @app.get("/admin/stats")
  async def admin_stats(admin_user: User = Depends(get_admin_user)):
      return {"message": "Admin only stats"}
  ```

## Configuration Dependencies

- **Inject Configuration**: Use dependency injection for configuration settings
  ```python
  # ✅ Good: Configuration dependency
  from functools import lru_cache
  from pydantic_settings import BaseSettings
  
  class Settings(BaseSettings):
      app_name: str = "GullyGuru"
      admin_email: str
      items_per_page: int = 10
      
      class Config:
          env_file = ".env"
  
  @lru_cache()
  def get_settings():
      return Settings()
  
  @app.get("/info")
  async def info(settings: Settings = Depends(get_settings)):
      return {
          "app_name": settings.app_name,
          "items_per_page": settings.items_per_page
      }
  ```

## Dependency Chaining

- **Chain Dependencies**: Build complex dependencies by combining simpler ones
  ```python
  # ✅ Good: Dependency chaining
  async def get_db():
      with Session() as session:
          yield session
  
  async def get_user_service(db: Session = Depends(get_db)):
      return UserService(db)
  
  async def get_current_user(
      token: str = Depends(oauth2_scheme),
      user_service: UserService = Depends(get_user_service)
  ):
      return user_service.verify_token(token)
  
  @app.get("/users/me")
  async def read_users_me(current_user: User = Depends(get_current_user)):
      return current_user
  ```

## Testing with Dependencies

- **Override Dependencies in Tests**: Make testing easier by overriding dependencies
  ```python
  # ✅ Good: Dependency override for testing
  from fastapi.testclient import TestClient
  
  app = FastAPI()
  
  def get_db():
      with Session() as session:
          yield session
  
  @app.get("/users/{user_id}")
  def read_user(user_id: int, db: Session = Depends(get_db)):
      return db.query(User).filter(User.id == user_id).first()
  
  # In tests
  def override_get_db():
      with TestSession() as session:  # Test session with mock database
          yield session
  
  app.dependency_overrides[get_db] = override_get_db
  client = TestClient(app)
  response = client.get("/users/1")
  ``` 