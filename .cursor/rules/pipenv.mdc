---
description: 
globs: 
alwaysApply: false
---
# Pipenv Usage Guidelines

## Environment Management

- **Always Use Pipenv**: Use Pipenv for all Python-related tasks in the GullyGuru project
  ```bash
  # ✅ Good: Using Pipenv to run Python scripts
  pipenv run python scripts/test_models.py
  
  # ❌ Bad: Running Python directly
  python scripts/test_models.py
  ```

- **Activate Virtual Environment**: For interactive sessions, activate the Pipenv shell
  ```bash
  # ✅ Good: Activating Pipenv shell for interactive work
  pipenv shell
  
  # Then run commands without 'pipenv run' prefix
  python scripts/test_models.py
  ```

## Package Management

- **Add Dependencies**: Use Pipenv to add new dependencies
  ```bash
  # ✅ Good: Adding production dependencies
  pipenv install sqlmodel alembic psycopg2-binary
  
  # ✅ Good: Adding development dependencies
  pipenv install --dev pytest black isort
  ```

- **Lock Dependencies**: Always lock dependencies after adding new ones
  ```bash
  # ✅ Good: Locking dependencies
  pipenv lock
  ```

- **Update Dependencies**: Update dependencies safely
  ```bash
  # ✅ Good: Updating all dependencies
  pipenv update
  
  # ✅ Good: Updating specific dependency
  pipenv update sqlmodel
  ```

## Database Migrations

- **Run Alembic Commands**: Use Pipenv to run Alembic migrations
  ```bash
  # ✅ Good: Creating a new migration
  pipenv run alembic revision --autogenerate -m "Description of changes"
  
  # ✅ Good: Applying migrations
  pipenv run alembic upgrade head
  
  # ✅ Good: Rolling back migrations
  pipenv run alembic downgrade -1
  ```

- **Migration Scripts**: Use Pipenv in migration scripts
  ```bash
  #!/bin/bash
  # ✅ Good: Using Pipenv in scripts
  pipenv run alembic upgrade head
  ```

## Testing

- **Run Tests**: Use Pipenv to run tests
  ```bash
  # ✅ Good: Running all tests
  pipenv run pytest
  
  # ✅ Good: Running specific tests
  pipenv run pytest tests/test_models.py
  ```

- **Code Quality**: Use Pipenv for linting and formatting
  ```bash
  # ✅ Good: Running linters
  pipenv run black src/
  pipenv run isort src/
  ```

## Application Execution

- **Run Development Server**: Use Pipenv to run the development server
  ```bash
  # ✅ Good: Running FastAPI server
  pipenv run uvicorn src.main:app --reload
  ```

- **Run Scripts**: Use Pipenv for all scripts
  ```bash
  # ✅ Good: Running custom scripts
  pipenv run python scripts/seed_database.py
  ```

## CI/CD Integration

- **CI Pipeline**: Ensure CI pipeline uses Pipenv
  ```yaml
  # ✅ Good: CI configuration using Pipenv
  steps:
    - name: Install dependencies
      run: |
        pip install pipenv
        pipenv install --dev
    
    - name: Run tests
      run: |
        pipenv run pytest
  ```

## Documentation

- **Document Pipenv Usage**: Always include Pipenv commands in documentation
  ```markdown
  # ✅ Good: Documentation with Pipenv commands
  ## Setup
  
  1. Install dependencies:
     ```bash
     pipenv install
     ```
  
  2. Run migrations:
     ```bash
     pipenv run alembic upgrade head
     ```
  ```

## Troubleshooting

- **Pipenv Lock Issues**: If Pipenv lock is taking too long
  ```bash
  # ✅ Good: Skip hash checking for faster locks
  pipenv lock --clear
  ```

- **Environment Variables**: Use Pipenv's .env support
  ```bash
  # ✅ Good: Running with environment variables
  pipenv run python scripts/test_models.py
  
  # Pipenv automatically loads variables from .env file
  ``` 