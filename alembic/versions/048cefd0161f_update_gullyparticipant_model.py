"""Update GullyParticipant model

Revision ID: 048cefd0161f
Revises: edc12c7811d3
Create Date: 2025-03-09 14:48:50.466787

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "048cefd0161f"
down_revision: Union[str, None] = "edc12c7811d3"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # First drop tables with foreign key dependencies
    op.execute("DROP TABLE IF EXISTS poll_votes CASCADE")
    op.execute("DROP TABLE IF EXISTS match_polls CASCADE")
    op.execute("DROP TABLE IF EXISTS api_player_stats CASCADE")
    op.execute("DROP TABLE IF EXISTS api_players CASCADE")
    op.execute("DROP TABLE IF EXISTS api_matches CASCADE")
    op.execute("DROP TABLE IF EXISTS api_teams CASCADE")

    # Now make the changes to existing tables
    op.drop_column("gullies", "end_date")
    op.drop_column("gullies", "start_date")
    op.alter_column(
        "gully_participants", "is_active", existing_type=sa.BOOLEAN(), nullable=False
    )
    op.alter_column(
        "gully_participants",
        "last_active_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=False,
    )
    op.alter_column(
        "gully_participants",
        "registration_complete",
        existing_type=sa.BOOLEAN(),
        nullable=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column(
        "gully_participants",
        "registration_complete",
        existing_type=sa.BOOLEAN(),
        nullable=True,
    )
    op.alter_column(
        "gully_participants",
        "last_active_at",
        existing_type=postgresql.TIMESTAMP(timezone=True),
        nullable=True,
    )
    op.alter_column(
        "gully_participants", "is_active", existing_type=sa.BOOLEAN(), nullable=True
    )
    op.add_column(
        "gullies",
        sa.Column("start_date", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "gullies",
        sa.Column("end_date", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.create_table(
        "api_player_stats",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("player_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("match_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("runs", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("balls_faced", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("fours", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("sixes", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "strike_rate",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "overs",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("maidens", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("runs_conceded", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("wickets", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "economy",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("catches", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("stumpings", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("run_outs", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "fantasy_points",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["match_id"], ["api_matches.id"], name="api_player_stats_match_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["player_id"], ["api_players.id"], name="api_player_stats_player_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="api_player_stats_pkey"),
    )
    op.create_table(
        "api_players",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("api_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("team_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("role", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("batting_style", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("bowling_style", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("image_url", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["team_id"], ["api_teams.id"], name="api_players_team_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="api_players_pkey"),
    )
    op.create_index("ix_api_players_name", "api_players", ["name"], unique=False)
    op.create_index("ix_api_players_api_id", "api_players", ["api_id"], unique=False)
    op.create_table(
        "poll_votes",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("poll_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("selected_option", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "points_earned",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["poll_id"], ["match_polls.id"], name="poll_votes_poll_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="poll_votes_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="poll_votes_pkey"),
    )
    op.create_table(
        "api_teams",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('api_teams_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("api_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("short_name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("logo_url", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="api_teams_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_api_teams_name", "api_teams", ["name"], unique=False)
    op.create_index("ix_api_teams_api_id", "api_teams", ["api_id"], unique=False)
    op.create_table(
        "api_matches",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("api_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("home_team_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("away_team_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("venue", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("date", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("format", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("result", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["away_team_id"], ["api_teams.id"], name="api_matches_away_team_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["home_team_id"], ["api_teams.id"], name="api_matches_home_team_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="api_matches_pkey"),
    )
    op.create_index("ix_api_matches_date", "api_matches", ["date"], unique=False)
    op.create_index("ix_api_matches_api_id", "api_matches", ["api_id"], unique=False)
    op.create_table(
        "match_polls",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("match_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("question", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("option1", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("option2", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("correct_option", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["match_id"], ["matches.id"], name="match_polls_match_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="match_polls_pkey"),
    )
    # ### end Alembic commands ###
