"""rename_user_players_to_participant_players

Revision ID: 608f18c028fc
Revises: 9e99274a72c2
Create Date: 2025-03-14 13:37:33.687115

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "608f18c028fc"
down_revision: Union[str, None] = "9e99274a72c2"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "participant_players",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("gully_participant_id", sa.Integer(), nullable=False),
        sa.Column("player_id", sa.Integer(), nullable=False),
        sa.Column("purchase_price", sa.Numeric(), nullable=False),
        sa.Column("purchase_date", sa.DateTime(timezone=True), nullable=False),
        sa.Column("is_captain", sa.Boolean(), nullable=False),
        sa.Column("is_vice_captain", sa.Boolean(), nullable=False),
        sa.Column("is_playing_xi", sa.Boolean(), nullable=False),
        sa.Column("status", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.ForeignKeyConstraint(
            ["gully_participant_id"],
            ["gully_participants.id"],
        ),
        sa.ForeignKeyConstraint(
            ["player_id"],
            ["players.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "player_id", "gully_participant_id", name="uq_player_participant"
        ),
    )
    op.create_index(
        op.f("ix_participant_players_gully_participant_id"),
        "participant_players",
        ["gully_participant_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_participant_players_player_id"),
        "participant_players",
        ["player_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_participant_players_status"),
        "participant_players",
        ["status"],
        unique=False,
    )

    # Add check constraint for status field
    op.create_check_constraint(
        "ck_participant_player_status",
        "participant_players",
        "status::text = ANY (ARRAY['draft'::character varying, 'locked'::character varying, 'contested'::character varying, 'owned'::character varying]::text[])",
    )

    # Transfer data from user_players to participant_players
    # First, get the gully_participant_id for each user_id and gully_id combination
    op.execute(
        """
    INSERT INTO participant_players (
        created_at, updated_at, player_id, purchase_price, purchase_date,
        is_captain, is_vice_captain, is_playing_xi, status, gully_participant_id
    )
    SELECT 
        up.created_at, up.updated_at, up.player_id, up.purchase_price, up.purchase_date,
        up.is_captain, up.is_vice_captain, up.is_playing_xi, up.status, gp.id
    FROM 
        user_players up
    JOIN 
        gully_participants gp ON up.user_id = gp.user_id AND up.gully_id = gp.gully_id
    """
    )

    # Now drop the old table and indexes
    op.drop_index("ix_user_players_gully_id", table_name="user_players")
    op.drop_index("ix_user_players_player_id", table_name="user_players")
    op.drop_index("ix_user_players_status", table_name="user_players")
    op.drop_index("ix_user_players_user_id", table_name="user_players")
    op.drop_table("user_players")
    op.drop_column("gully_participants", "is_active")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "gully_participants",
        sa.Column(
            "is_active",
            sa.BOOLEAN(),
            server_default=sa.text("true"),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.create_table(
        "user_players",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("player_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("gully_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("purchase_price", sa.NUMERIC(), autoincrement=False, nullable=False),
        sa.Column(
            "purchase_date",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("is_captain", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("is_vice_captain", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("is_playing_xi", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column(
            "status",
            sa.VARCHAR(),
            server_default=sa.text("'draft'::character varying"),
            autoincrement=False,
            nullable=False,
        ),
        sa.CheckConstraint(
            "status::text = ANY (ARRAY['draft'::character varying, 'locked'::character varying, 'contested'::character varying, 'owned'::character varying]::text[])",
            name="ck_user_player_status",
        ),
        sa.ForeignKeyConstraint(
            ["gully_id"], ["gullies.id"], name="user_players_gully_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["player_id"], ["players.id"], name="user_players_player_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="user_players_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="user_players_pkey"),
        sa.UniqueConstraint("player_id", "gully_id", name="uq_player_gully"),
    )
    op.create_index(
        "ix_user_players_user_id", "user_players", ["user_id"], unique=False
    )
    op.create_index("ix_user_players_status", "user_players", ["status"], unique=False)
    op.create_index(
        "ix_user_players_player_id", "user_players", ["player_id"], unique=False
    )
    op.create_index(
        "ix_user_players_gully_id", "user_players", ["gully_id"], unique=False
    )

    # Transfer data back from participant_players to user_players
    op.execute(
        """
    INSERT INTO user_players (
        created_at, updated_at, player_id, purchase_price, purchase_date,
        is_captain, is_vice_captain, is_playing_xi, status, user_id, gully_id
    )
    SELECT 
        pp.created_at, pp.updated_at, pp.player_id, pp.purchase_price, pp.purchase_date,
        pp.is_captain, pp.is_vice_captain, pp.is_playing_xi, pp.status, gp.user_id, gp.gully_id
    FROM 
        participant_players pp
    JOIN 
        gully_participants gp ON pp.gully_participant_id = gp.id
    """
    )

    op.drop_index(
        op.f("ix_participant_players_status"), table_name="participant_players"
    )
    op.drop_index(
        op.f("ix_participant_players_player_id"), table_name="participant_players"
    )
    op.drop_index(
        op.f("ix_participant_players_gully_participant_id"),
        table_name="participant_players",
    )
    op.drop_constraint(
        "ck_participant_player_status", "participant_players", type_="check"
    )
    op.drop_table("participant_players")
    # ### end Alembic commands ###
