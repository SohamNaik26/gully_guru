"""Remove gully-related fields from User model

Revision ID: 8dd831626b3a
Revises: 204c95b3fb07
Create Date: 2025-03-09 10:54:00.406846

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "8dd831626b3a"
down_revision: Union[str, None] = "204c95b3fb07"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_index("ix_api_teams_api_id", table_name="api_teams")
    # op.drop_index("ix_api_teams_name", table_name="api_teams")
    # op.drop_table("api_teams")
    # op.drop_table("poll_votes")
    # op.drop_index("ix_api_players_api_id", table_name="api_players")
    # op.drop_index("ix_api_players_name", table_name="api_players")
    # op.drop_table("api_players")
    # op.drop_index("ix_api_matches_api_id", table_name="api_matches")
    # op.drop_index("ix_api_matches_date", table_name="api_matches")
    # op.drop_table("api_matches")
    # op.drop_table("match_polls")
    # op.drop_table("api_player_stats")
    op.add_column(
        "gully_participants",
        sa.Column("role", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    )
    op.drop_constraint("users_active_gully_id_fkey", "users", type_="foreignkey")
    op.drop_column("users", "budget")
    op.drop_column("users", "free_bids_used")
    op.drop_column("users", "is_admin")
    op.drop_column("users", "active_gully_id")
    op.drop_column("users", "total_points")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "users",
        sa.Column(
            "total_points",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
    )
    op.add_column(
        "users",
        sa.Column("active_gully_id", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "users",
        sa.Column("is_admin", sa.BOOLEAN(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "users",
        sa.Column("free_bids_used", sa.INTEGER(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "users", sa.Column("budget", sa.NUMERIC(), autoincrement=False, nullable=False)
    )
    op.create_foreign_key(
        "users_active_gully_id_fkey", "users", "gullies", ["active_gully_id"], ["id"]
    )
    op.drop_column("gully_participants", "role")
    op.create_table(
        "api_player_stats",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("player_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("match_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("runs", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("balls_faced", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("fours", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("sixes", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "strike_rate",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "overs",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("maidens", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("runs_conceded", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("wickets", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "economy",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("catches", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("stumpings", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("run_outs", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "fantasy_points",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["match_id"], ["api_matches.id"], name="api_player_stats_match_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["player_id"], ["api_players.id"], name="api_player_stats_player_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="api_player_stats_pkey"),
    )
    op.create_table(
        "match_polls",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('match_polls_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("match_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("question", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("option1", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("option2", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("correct_option", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["match_id"], ["matches.id"], name="match_polls_match_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="match_polls_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "api_matches",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("api_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("home_team_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("away_team_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("venue", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("date", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("format", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("result", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["away_team_id"], ["api_teams.id"], name="api_matches_away_team_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["home_team_id"], ["api_teams.id"], name="api_matches_home_team_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="api_matches_pkey"),
    )
    op.create_index("ix_api_matches_date", "api_matches", ["date"], unique=False)
    op.create_index("ix_api_matches_api_id", "api_matches", ["api_id"], unique=False)
    op.create_table(
        "api_players",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("api_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("team_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("role", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("batting_style", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("bowling_style", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("image_url", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["team_id"], ["api_teams.id"], name="api_players_team_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="api_players_pkey"),
    )
    op.create_index("ix_api_players_name", "api_players", ["name"], unique=False)
    op.create_index("ix_api_players_api_id", "api_players", ["api_id"], unique=False)
    op.create_table(
        "poll_votes",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("poll_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("selected_option", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "points_earned",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["poll_id"], ["match_polls.id"], name="poll_votes_poll_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="poll_votes_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="poll_votes_pkey"),
    )
    op.create_table(
        "api_teams",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("api_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("short_name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("logo_url", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.PrimaryKeyConstraint("id", name="api_teams_pkey"),
    )
    op.create_index("ix_api_teams_name", "api_teams", ["name"], unique=False)
    op.create_index("ix_api_teams_api_id", "api_teams", ["api_id"], unique=False)
    # ### end Alembic commands ###
