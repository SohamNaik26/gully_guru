"""Add additional fields to GullyParticipant model

Revision ID: cfbb77fbbc4c
Revises: 8dd831626b3a
Create Date: 2025-03-09 10:55:26.658432

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "cfbb77fbbc4c"
down_revision: Union[str, None] = "8dd831626b3a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Commenting out API table operations to avoid dependency issues
    # op.drop_table("api_players")
    # op.drop_table("poll_votes")
    # op.drop_table("api_matches")
    # op.drop_table("match_polls")
    # op.drop_table("api_player_stats")
    # op.drop_table("api_teams")

    # Add columns to gully_participants
    op.add_column(
        "gully_participants", sa.Column("is_active", sa.Boolean(), nullable=True)
    )
    # op.add_column("gully_participants", sa.Column("is_originating", sa.Boolean(), nullable=True))
    # op.add_column("gully_participants", sa.Column("joined_via", sa.String(), nullable=True))
    op.add_column(
        "gully_participants",
        sa.Column("last_active_at", sa.DateTime(timezone=True), nullable=True),
    )
    op.add_column(
        "gully_participants",
        sa.Column("registration_complete", sa.Boolean(), nullable=True),
    )
    op.add_column(
        "gully_participants", sa.Column("free_bids_used", sa.Integer(), nullable=True)
    )

    # Set default values for new columns
    op.execute(
        "UPDATE gully_participants SET is_active = FALSE WHERE is_active IS NULL"
    )
    # op.execute("UPDATE gully_participants SET is_originating = FALSE WHERE is_originating IS NULL")
    # op.execute("UPDATE gully_participants SET joined_via = 'added' WHERE joined_via IS NULL")
    op.execute(
        "UPDATE gully_participants SET last_active_at = NOW() WHERE last_active_at IS NULL"
    )
    op.execute(
        "UPDATE gully_participants SET registration_complete = FALSE WHERE registration_complete IS NULL"
    )
    op.execute(
        "UPDATE gully_participants SET free_bids_used = 0 WHERE free_bids_used IS NULL"
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("gully_participants", "free_bids_used")
    op.drop_column("gully_participants", "registration_complete")
    op.drop_column("gully_participants", "last_active_at")
    # op.drop_column("gully_participants", "joined_via")
    # op.drop_column("gully_participants", "is_originating")
    op.drop_column("gully_participants", "is_active")
    # op.create_table(
    #     "api_teams",
    #     sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
    #     sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    #     sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    #     sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
    #     sa.Column("short_name", sa.VARCHAR(), autoincrement=False, nullable=False),
    #     sa.Column("api_id", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.PrimaryKeyConstraint("id", name="api_teams_pkey"),
    # )
    # op.create_index("ix_api_teams_name", "api_teams", ["name"], unique=False)
    # op.create_index("ix_api_teams_api_id", "api_teams", ["api_id"], unique=False)
    # op.create_table(
    #     "api_player_stats",
    #     sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
    #     sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    #     sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    #     sa.Column("player_id", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.Column("matches", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.Column("innings", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.Column("runs", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.Column("balls_faced", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.Column("highest", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.Column("average", sa.NUMERIC(), autoincrement=False, nullable=False),
    #     sa.Column("strike_rate", sa.NUMERIC(), autoincrement=False, nullable=False),
    #     sa.Column("hundreds", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.Column("fifties", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.Column("fours", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.Column("sixes", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.Column("overs", sa.NUMERIC(), autoincrement=False, nullable=False),
    #     sa.Column("wickets", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.Column("economy", sa.NUMERIC(), autoincrement=False, nullable=False),
    #     sa.Column("best_bowling", sa.VARCHAR(), autoincrement=False, nullable=False),
    #     sa.ForeignKeyConstraint(["player_id"], ["api_players.id"], name="api_player_stats_player_id_fkey"),
    #     sa.PrimaryKeyConstraint("id", name="api_player_stats_pkey"),
    # )
    # op.create_table(
    #     "match_polls",
    #     sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
    #     sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    #     sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    #     sa.Column("match_id", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.Column("telegram_poll_id", sa.VARCHAR(), autoincrement=False, nullable=False),
    #     sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=False),
    #     sa.ForeignKeyConstraint(["match_id"], ["api_matches.id"], name="match_polls_match_id_fkey"),
    #     sa.PrimaryKeyConstraint("id", name="match_polls_pkey"),
    # )
    # op.create_table(
    #     "api_matches",
    #     sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
    #     sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    #     sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    #     sa.Column("api_id", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.Column("date", sa.VARCHAR(), autoincrement=False, nullable=False),
    #     sa.Column("venue", sa.VARCHAR(), autoincrement=False, nullable=False),
    #     sa.Column("team1_id", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.Column("team2_id", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.Column("team1_score", sa.VARCHAR(), autoincrement=False, nullable=True),
    #     sa.Column("team2_score", sa.VARCHAR(), autoincrement=False, nullable=True),
    #     sa.Column("result", sa.VARCHAR(), autoincrement=False, nullable=True),
    #     sa.Column("winner_id", sa.INTEGER(), autoincrement=False, nullable=True),
    #     sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=False),
    #     sa.ForeignKeyConstraint(["team1_id"], ["api_teams.id"], name="api_matches_team1_id_fkey"),
    #     sa.ForeignKeyConstraint(["team2_id"], ["api_teams.id"], name="api_matches_team2_id_fkey"),
    #     sa.ForeignKeyConstraint(["winner_id"], ["api_teams.id"], name="api_matches_winner_id_fkey"),
    #     sa.PrimaryKeyConstraint("id", name="api_matches_pkey"),
    # )
    # op.create_index("ix_api_matches_date", "api_matches", ["date"], unique=False)
    # op.create_index("ix_api_matches_api_id", "api_matches", ["api_id"], unique=False)
    # op.create_table(
    #     "poll_votes",
    #     sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
    #     sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    #     sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    #     sa.Column("poll_id", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.Column("option_index", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.ForeignKeyConstraint(["poll_id"], ["match_polls.id"], name="poll_votes_poll_id_fkey"),
    #     sa.ForeignKeyConstraint(["user_id"], ["users.id"], name="poll_votes_user_id_fkey"),
    #     sa.PrimaryKeyConstraint("id", name="poll_votes_pkey"),
    # )
    # op.create_table(
    #     "api_players",
    #     sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
    #     sa.Column("created_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    #     sa.Column("updated_at", postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    #     sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
    #     sa.Column("api_id", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.Column("team_id", sa.INTEGER(), autoincrement=False, nullable=False),
    #     sa.Column("role", sa.VARCHAR(), autoincrement=False, nullable=False),
    #     sa.Column("batting_style", sa.VARCHAR(), autoincrement=False, nullable=True),
    #     sa.Column("bowling_style", sa.VARCHAR(), autoincrement=False, nullable=True),
    #     sa.Column("nationality", sa.VARCHAR(), autoincrement=False, nullable=True),
    #     sa.Column("image_url", sa.VARCHAR(), autoincrement=False, nullable=True),
    #     sa.ForeignKeyConstraint(["team_id"], ["api_teams.id"], name="api_players_team_id_fkey"),
    #     sa.PrimaryKeyConstraint("id", name="api_players_pkey"),
    # )
    # op.create_index("ix_api_players_name", "api_players", ["name"], unique=False)
    # op.create_index("ix_api_players_api_id", "api_players", ["api_id"], unique=False)
    # ### end Alembic commands ###
