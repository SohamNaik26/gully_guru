"""add_draft_selections_table

Revision ID: 09618f661e19
Revises: 608f18c028fc
Create Date: 2025-03-15 13:37:03.366335

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision: str = "09618f661e19"
down_revision: Union[str, None] = "608f18c028fc"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "draft_selections",
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("gully_participant_id", sa.Integer(), nullable=False),
        sa.Column("player_id", sa.Integer(), nullable=False),
        sa.Column("selected_at", sa.DateTime(timezone=True), nullable=False),
        sa.Column("is_submitted", sa.Boolean(), nullable=False),
        sa.ForeignKeyConstraint(
            ["gully_participant_id"],
            ["gully_participants.id"],
        ),
        sa.ForeignKeyConstraint(
            ["player_id"],
            ["players.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_draft_selections_gully_participant_id"),
        "draft_selections",
        ["gully_participant_id"],
        unique=False,
    )
    op.create_index(
        "ix_draft_selections_gully_player",
        "draft_selections",
        ["gully_participant_id", "player_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_draft_selections_player_id"),
        "draft_selections",
        ["player_id"],
        unique=False,
    )
    # ### end Alembic commands ###

    # Migrate existing draft data from participant_players to draft_selections
    # First, get all participant_players with status='draft'
    connection = op.get_bind()

    # Check if 'draft' status exists in the enum
    enum_values = connection.execute(
        sa.text("SELECT enum_range(NULL::userplayerstatus)::text[]")
    ).scalar()

    if enum_values and "draft" in enum_values:
        draft_players = connection.execute(
            sa.text(
                "SELECT id, gully_participant_id, player_id, purchase_date, "
                "created_at, updated_at FROM participant_players WHERE status = 'draft'"
            )
        ).fetchall()

        # Insert them into draft_selections
        for player in draft_players:
            connection.execute(
                sa.text(
                    "INSERT INTO draft_selections "
                    "(gully_participant_id, player_id, selected_at, is_submitted, created_at, updated_at) "
                    "VALUES (:gully_participant_id, :player_id, :selected_at, TRUE, :created_at, :updated_at)"
                ),
                {
                    "gully_participant_id": player.gully_participant_id,
                    "player_id": player.player_id,
                    "selected_at": player.purchase_date,
                    "created_at": player.created_at,
                    "updated_at": player.updated_at,
                },
            )

        # Delete the draft records from participant_players
        connection.execute(
            sa.text("DELETE FROM participant_players WHERE status = 'draft'")
        )

        # Update the UserPlayerStatus enum to remove 'draft'
        # This is a bit tricky with PostgreSQL enums, so we'll create a new enum and update the column

        # Create a new enum without 'draft'
        op.execute("ALTER TYPE userplayerstatus RENAME TO userplayerstatus_old")
        op.execute(
            "CREATE TYPE userplayerstatus AS ENUM ('locked', 'contested', 'owned')"
        )

        # Update the column to use the new enum
        op.execute(
            "ALTER TABLE participant_players ALTER COLUMN status TYPE userplayerstatus "
            "USING status::text::userplayerstatus"
        )

        # Drop the old enum
        op.execute("DROP TYPE userplayerstatus_old")


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    # Check if we need to add 'draft' back to the enum
    connection = op.get_bind()
    enum_values = connection.execute(
        sa.text("SELECT enum_range(NULL::userplayerstatus)::text[]")
    ).scalar()

    if enum_values and "draft" not in enum_values:
        # Add 'draft' back to the UserPlayerStatus enum
        op.execute("ALTER TYPE userplayerstatus RENAME TO userplayerstatus_old")
        op.execute(
            "CREATE TYPE userplayerstatus AS ENUM ('draft', 'locked', 'contested', 'owned')"
        )

        # Update the column to use the new enum
        op.execute(
            "ALTER TABLE participant_players ALTER COLUMN status TYPE userplayerstatus "
            "USING status::text::userplayerstatus"
        )

        # Drop the old enum
        op.execute("DROP TYPE userplayerstatus_old")

    # Migrate data back from draft_selections to participant_players
    connection = op.get_bind()
    draft_selections = connection.execute(
        sa.text(
            "SELECT gully_participant_id, player_id, selected_at, created_at, updated_at "
            "FROM draft_selections"
        )
    ).fetchall()

    # Insert them back into participant_players
    for selection in draft_selections:
        connection.execute(
            sa.text(
                "INSERT INTO participant_players "
                "(gully_participant_id, player_id, purchase_price, purchase_date, "
                "is_captain, is_vice_captain, is_playing_xi, status, created_at, updated_at) "
                "VALUES (:gully_participant_id, :player_id, 0, :purchase_date, "
                "FALSE, FALSE, TRUE, 'draft', :created_at, :updated_at)"
            ),
            {
                "gully_participant_id": selection.gully_participant_id,
                "player_id": selection.player_id,
                "purchase_date": selection.selected_at,
                "created_at": selection.created_at,
                "updated_at": selection.updated_at,
            },
        )

    op.drop_index(op.f("ix_draft_selections_player_id"), table_name="draft_selections")
    op.drop_index("ix_draft_selections_gully_player", table_name="draft_selections")
    op.drop_index(
        op.f("ix_draft_selections_gully_participant_id"), table_name="draft_selections"
    )
    op.drop_table("draft_selections")
    # ### end Alembic commands ###
